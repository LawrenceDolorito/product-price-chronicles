
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wwjudpfzijrxvkqxbsem.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind3anVkcGZ6aWpyeHZrcXhic2VtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM2NDc5MzAsImV4cCI6MjA1OTIyMzkzMH0.DBdBbk_4wYuYf-Rmx7H0FdZ648-FTlhCDr1pKqf1u-o";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to check database connection
export const checkDatabaseConnection = async () => {
  try {
    // Use the RPC function that is working correctly
    const { data: rpcData, error: rpcError, count } = await supabase
      .rpc('get_products_with_current_price', {}, { count: 'exact', head: true });
    
    console.log("RPC function connection test result:", { error: rpcError, count });
    
    if (rpcError) {
      console.error('Database connection error with RPC:', rpcError);
      return { connected: false, error: rpcError };
    }
    
    // If RPC test passes, we're good to go
    return { connected: true, count };
  } catch (err) {
    console.error('Unexpected error checking database:', err);
    return { connected: false, error: err };
  }
};

// Helper function to update price history
export const updatePriceHistory = async (productCode: string, oldDate: string, newDate: string, price: number) => {
  try {
    // First try direct update if dates are the same
    if (oldDate === newDate) {
      const { data, error } = await supabase
        .from("pricehist")
        .update({ unitprice: price })
        .eq("prodcode", productCode)
        .eq("effdate", oldDate);
        
      if (!error) {
        console.log("Price updated successfully via direct update");
        return { success: true, data };
      }
      
      console.error("Error with direct update:", error);
    }
    
    // If direct update failed or dates are different, try delete and insert approach
    console.log("Using delete and insert approach for price update");
    
    // Delete the old record
    const { error: deleteError } = await supabase
      .from("pricehist")
      .delete()
      .eq("prodcode", productCode)
      .eq("effdate", oldDate);
      
    if (deleteError) {
      throw deleteError;
    }
    
    // Insert the new record
    const { data: insertData, error: insertError } = await supabase
      .from("pricehist")
      .insert({
        prodcode: productCode,
        effdate: newDate,
        unitprice: price,
      });
      
    if (insertError) {
      throw insertError;
    }
    
    return { success: true, data: insertData };
  } catch (err) {
    console.error("Error updating price history:", err);
    return { success: false, error: err };
  }
};
